# .github/workflows/dotnet-kit-build.yml
# GitHub Actions workflow to build all projects in the Kit folder on every push

name: Build Kit Projects

on:
  push:
    branches: [ "main", "master", "develop" ]
    tags:
      - 'v*' # Trigger release job on version tags
  pull_request:
    branches: [ "main", "master", "develop" ]

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        project:
          - rnet-kit/rnet-kit.csproj
          - rnet-class-dump/rnet-class-dump.csproj
          - rnet-dump/rnet-dump.csproj
          - rnet-inject/rnet-inject.csproj
          - rnet-ps/rnet-ps.csproj
          - rnet-trace/rnet-trace.csproj
        configuration: [Debug, Release]
    env:
      Solution_Name: Merged.sln
      GITHUB_ACTIONS: true
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Initialize submodules (if needed)
        run: git submodule update --init --recursive
      
      # Add nuget.config for Azure DevOps feed
      - name: Copy custom NuGet config
        run: copy rnet-repl\RemoteNetRepl\nuget.config nuget.config

      # Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            7.0.x
            6.0.x
            5.0.x
            3.1.x

      # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v2

      # Prepare Detours library
      - name: Prepare Detours library
        run: |
          cd RemoteNET\src
          mkdir detours_build
          cd detours_build
          cmake ..\detours.net

        # Restore the application to populate the obj folder with RuntimeIdentifiers
      - name: Restore Solution
        run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration /p:RestoreConfigFile=nuget.config
        env:
            Configuration: ${{ matrix.configuration }}
          
      - name: Build Detours NET
        run: msbuild $env:Solution_Name -target:RemoteNET_Dir\DetoursNet\ALL_BUILD:rebuild /p:Configuration=$env:Configuration /property:Platform=Mixed /p:RestoreConfigFile=nuget.config
        env:
            Configuration: ${{ matrix.configuration }}

        # Restore the application to populate the obj folder with RuntimeIdentifiers
      - name: Build RemoteNET
        run: msbuild $env:Solution_Name -target:RemoteNET_Dir\RemoteNET:rebuild /p:Configuration=$env:Configuration /property:Platform=Mixed /p:RestoreConfigFile=nuget.config
        env:
            Configuration: ${{ matrix.configuration }}


      - name: Restore dependencies
        run: dotnet restore ${{ matrix.project }} --configfile nuget.config
      - name: Build
        run: dotnet build ${{ matrix.project }} --configuration $env:Configuration --no-restore
        env:
            Configuration: ${{ matrix.configuration }}

      - name: Test (if present)
        run: |
          if (Test-Path (Join-Path (Split-Path ${{ matrix.project }}) 'tests')) {
            dotnet test (Join-Path (Split-Path ${{ matrix.project }}) 'tests') --no-build --configuration Release
          }
        shell: pwsh

      - name: Set project directory
        id: project_dir
        run: |
          $dir = Split-Path '${{ matrix.project }}'
          echo "dir=$dir" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Upload build artifacts
        if: ${{ matrix.project == 'rnet-kit/rnet-kit.csproj' && matrix.configuration == 'Release' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.project_dir.outputs.dir }}-release
          path: ${{ github.workspace }}/${{ steps.project_dir.outputs.dir }}/bin/Release/**/*

  release:
    name: Release Artifacts
    needs: build
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
      - name: Package binaries
        run: |
          cd release-artifacts
          Compress-Archive -Path * -DestinationPath ../binaries.zip
        shell: pwsh
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./binaries.zip
          asset_name: binaries.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
