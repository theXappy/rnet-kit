<Window x:Class="RemoteNetSpy.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:remoteNetSpy="clr-namespace:RemoteNetSpy"
        xmlns:models="clr-namespace:RemoteNetSpy.Models"
        xmlns:controls="clr-namespace:RemoteNetSpy.Controls"
        xmlns:converters="clr-namespace:RemoteNetSpy.Converters"
        xmlns:hostingwfinwpf="clr-namespace:HostingWfInWPF;assembly=HostingWfInWPF" xmlns:dragdropexpressionbuilder="clr-namespace:DragDropExpressionBuilder"
        mc:Ignorable="d"
        Title="RemoteNET Spy"
        Height="820" Width="1450"
        WindowStartupLocation="CenterScreen"
        WindowState="Maximized"
        Style="{DynamicResource CustomWindowStyle}"
        Initialized="MainWindow_OnInitialized"
        d:Background="#1e1e1e"
        PreviewKeyDown="OnKeyDown_DoZoom"
        UseLayoutRounding="True"
        d:BorderThickness="0"
        >
    <Window.Resources>
        <converters:MemberToIconConverter x:Key="memToIconConverter"/>
        <converters:BoolToWatchIconConverter x:Key="moduleToWatchIconConverter"/>
        <converters:BoolToFreezeButtonText x:Key="boolToFreezeButtonText"/>
        <converters:BoolToFreezeIconConverter x:Key="boolToFreezeIcon"/>
        <converters:InverseBooleanConverter x:Key="inverseBooleanConverter"/>
        <converters:BoolToVisibilityConverter x:Key="boolToVisibilityConverter"/>
        <converters:BoolToCollapsabilityConverter x:Key="boolToCollapsabilityConverter"/>
        <converters:BoolToForegroundColor x:Key="boolToForegroundColor"/>
        <converters:IsProcessDeadToBackgroundColor x:Key="isProcessDeadToBackgroundColor"/>
        <converters:DumpedTypeToDescription x:Key="dumpedTypeToDescription"/>
        <converters:DifferenceToForegroundColor x:Key="differenceToForegroundColor"/>
        <converters:CountToVisibilityConverter x:Key="countToVisibilityConverter"/>
        <Style TargetType="ToolBar">
            <!-- Not Dropdown Button -->
            <Setter Property="ToolBarTray.IsLocked" Value="True"/>
            <!-- Not Overflow Button -->
            <Setter Property="OverflowMode" Value="Never"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToolBar">
                        <ToolBarPanel IsItemsHost="True" Background="{x:Null}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- Style for ToolBarTrays -->
        <Style TargetType="ToolBarTray">
            <Setter Property="Background" Value="{x:Null}"/>
        </Style>
        <!-- Style for Buttons -->
        <Style TargetType="Button" BasedOn="{StaticResource darkThemeButtonStyleKey}">
            <Setter Property="Background" Value="{x:Null}"/>
            <Setter Property="BorderBrush" Value="{x:Null}"/>
        </Style>
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="3*"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="23"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <DockPanel Grid.Row="0" Grid.Column="0">
            <DockPanel DockPanel.Dock="Top" Margin="5">
                <TextBlock DockPanel.Dock="Left" Margin="4,0,4,0" VerticalAlignment="Center">Target:</TextBlock>
                <TextBlock x:Name="selectedTargetTextBlock" DockPanel.Dock="Left" Margin="4,0,4,0" VerticalAlignment="Center"/>
                <remoteNetSpy:Spinner x:Name="processConnectionSpinner" Margin="1" Visibility="Collapsed"/>
            </DockPanel>
            <ToolBarTray DockPanel.Dock="Top" Background="#22000000" Margin="2,0" Height="30">
                <ToolBar BandIndex="3" Height="28" Margin="1,1">
                    <DockPanel>
                        <Button x:Name="browserButton" Margin="1,1" Padding="0" Click="LaunchBrowserClick"
                                DockPanel.Dock="Left">
                            <Grid Height="26">
                                <TextBlock/>
                                <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="2,0">
                                    <Image Source="icons/Web.png" Height="16"/>
                                    <TextBlock  Margin="4,0" VerticalAlignment="Center" HorizontalAlignment="Center">Browse API</TextBlock>
                                </StackPanel>
                            </Grid>
                        </Button>
                        <Button x:Name="memoryViewButton" Margin="1,1" Padding="0" Click="memoryViewButton_Click"
                                DockPanel.Dock="Left">
                            <Grid Height="26">
                                <TextBlock/>
                                <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="2,0">
                                    <Image Source="icons/Memory.png" Height="16"/>
                                    <TextBlock  Margin="4,0" VerticalAlignment="Center" HorizontalAlignment="Center">Memory View</TextBlock>
                                </StackPanel>
                            </Grid>
                        </Button>
                    </DockPanel>
                </ToolBar>
            </ToolBarTray>
        </DockPanel>


        <Grid Grid.Row="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="4*"/>
            </Grid.ColumnDefinitions>
            <ListBox FontSize="14"
                 HorizontalContentAlignment="Stretch"
                 ItemsSource="{Binding ElementName=MyTabControl, Path=Items}"
                 SelectedItem="{Binding ElementName=MyTabControl, Path=SelectedItem, Mode=TwoWay}">
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <ContentControl Content="{Binding Header}"/>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>
            <GridSplitter Grid.Column="1" Width="5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Transparent"/>
            <TabControl x:Name="MyTabControl" Grid.Column="2" SelectedIndex="0" SelectionChanged="MyTabControl_SelectionChanged">
                <TabControl.Template>
                    <ControlTemplate TargetType="TabControl">
                        <Grid>
                            <!-- Only show the selected content -->
                            <ContentPresenter ContentSource="SelectedContent"/>
                        </Grid>
                    </ControlTemplate>
                </TabControl.Template>
                <!-- Tab Item: Types Search -->
                <TabItem>
                    <TabItem.Header>
                        <StackPanel Orientation="Horizontal" Margin="10,6,0,8">
                            <Image Source="icons/search-24.png" Height="16"/>
                            <TextBlock Margin="4,0,0,0">Types Search</TextBlock>
                        </StackPanel>
                    </TabItem.Header>
                    <Grid x:Name="AssembliesValuesArea" Margin="2,2,0,2">
                        <controls:TypeSystemTreeView x:Name="typeSystemTreeView"/>
                        <remoteNetSpy:Spinner x:Name="assembliesSpinner" Margin="1" Visibility="Collapsed"/>
                    </Grid>
                </TabItem>

                <!-- Tab Item: Tracing -->
                <TabItem x:Name="TracingTabItem">
                    <TabItem.Header>
                        <StackPanel Orientation="Horizontal" Margin="10,6,0,8">
                            <Image Source="icons/microscope-24.png" Height="16"/>
                            <TextBlock Margin="4,0,0,0">Tracing</TextBlock>
                            <Grid x:Name="tracingNotificationIndicator" Visibility="{Binding DataContext.Tracer.NotificationsCount, RelativeSource={RelativeSource AncestorType=Window}, Converter={StaticResource countToVisibilityConverter}}">
                                <Border BorderThickness="2" BorderBrush="#FF5533" CornerRadius="10" Height="14" Width="14" Margin="4,0,0,0">
                                    <DockPanel Background="#FF5533"/>
                                </Border>
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,0,0,3">
                                    <TextBlock x:Name="tracingNotificationsCount" Text="{Binding DataContext.Tracer.NotificationsCount, RelativeSource={RelativeSource AncestorType=Window}, FallbackValue=0}" Foreground="White" FontSize="10" FontWeight="Bold" Margin="4,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                                </StackPanel>
                            </Grid>
                        </StackPanel>
                    </TabItem.Header>
                    <DockPanel>
                        <StackPanel DockPanel.Dock="Top" Orientation="Horizontal">
                            <Button Command="{Binding Tracer.RunRemoteNetTracesCommand}" Padding="5,0" Margin="0,2" MinHeight="21">
                                <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                    <Image Source="icons/Run.png" Height="16"/>
                                    <TextBlock Padding="0,0" Margin="5,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Center">Start Trace (rnet-trace)</TextBlock>
                                </StackPanel>
                            </Button>
                            <Button x:Name="RunFridaTracesButton" Command="{Binding Tracer.RunFridaTracesCommand}" Padding="5,0" Margin="0,2" MinHeight="21">
                                <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                    <Image Source="icons/Run.png" Height="16"/>
                                    <TextBlock Padding="0,0" Margin="5,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Center">Start Trace (frida-trace)</TextBlock>
                                </StackPanel>
                            </Button>
                            <Button Padding="2,0" Margin="2,2" MinHeight="21" Command="{Binding Tracer.OpenCommand}">
                                <Image Source="icons/OpenFolder.png" Height="16"/>
                            </Button>
                            <Button Padding="2,0" Margin="2,2" MinHeight="21" Command="{Binding Tracer.SaveCommand}">
                                <Image Source="icons/Save.png" Height="16"/>
                            </Button>
                            <Button Padding="2,0" Margin="2,2" MinHeight="21" Command="{Binding Tracer.ClearCommand}">
                                <Image Source="icons/ClearWindowContent.png" Height="16"/>
                            </Button>
                            <Button Padding="5,0" Margin="2,2" Click="ManualTraceClicked" Visibility="Collapsed">Manual Trace</Button>
                        </StackPanel>
                        <ListBox x:Name="tracesListBox">
                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <DockPanel>
                                        <DockPanel.ContextMenu>
                                            <ContextMenu>
                                                <MenuItem Header="Delete" Click="TraceLineDelete_OnClick"/>
                                            </ContextMenu>
                                        </DockPanel.ContextMenu>
                                        <Image Source="/icons/NewMethod.png" Margin="0,0,3,0"/>
                                        <TextBlock Text="{Binding Path=DemangledName}" />
                                    </DockPanel>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>
                    </DockPanel>
                </TabItem>

                <!-- Drag and Drop Playground-->
                <TabItem>
                    <TabItem.Header>
                        <StackPanel Orientation="Horizontal" Margin="10,6,0,8">
                            <Image Source="icons/rocking-horse-24.png" Height="16"/>
                            <TextBlock Margin="4,0,0,0">Playground</TextBlock>
                        </StackPanel>
                    </TabItem.Header>
                    <dragdropexpressionbuilder:DragDropPlayground Grid.Column="1" Grid.Row="0" x:Name="dragDropPlayground"/>
                </TabItem>

                <!-- C# REPL -->
                <TabItem>
                    <TabItem.Header>
                        <StackPanel Orientation="Horizontal" Margin="10,6,0,8">
                            <Image Source="icons/terminal-16.png" Height="16"/>
                            <TextBlock Margin="4,0,0,0">C# REPL</TextBlock>
                        </StackPanel>
                    </TabItem.Header>
                    <Border BorderBrush="#FF3C3C3C" BorderThickness="1" DockPanel.Dock="Right">
                        <Grid>
                            <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center">Immediate Window</TextBlock>
                            <hostingwfinwpf:ConEnumWpfHost x:Name="interactivePanel"/>
                        </Grid>
                    </Border>
                </TabItem>

            </TabControl>
        </Grid>
        <DockPanel Background="Pink" Grid.Row="2" Grid.Column="0" Visibility="Collapsed">
            <!-- Watched Instances (Hidden) -->
            <ListBox x:Name="watchedObjectsListBox" Margin="0" DockPanel.Dock="Top" PreviewMouseMove="watchedObjectsListBox_PreviewMouseMove">
                <ListBox.ItemContainerStyle>
                    <Style TargetType="ListBoxItem">
                        <Setter Property="HorizontalContentAlignment" Value="Stretch"></Setter>
                    </Style>
                </ListBox.ItemContainerStyle>
                <ListBox.ItemTemplate>
                    <DataTemplate DataType="{x:Type models:HeapObjectViewModel}">
                        <Grid>
                            <Grid.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Header="Copy Address" Click="CopyAddressMenuItem_Click"/>
                                    <MenuItem Header="Cast to Another Type" Click="PromptForVariableCast"/>
                                    <MenuItem Header="Add to Playground" Click="FrozenObject_AddToPlayground"/>
                                </ContextMenu>
                            </Grid.ContextMenu>

                            <!--This TextBlock combined with the wrapper 'Grid' is a hack to allow the right-click Context menu in the entire line-->

                            <TextBlock Margin="0"/>
                            <DockPanel Margin="0" LastChildFill="False" MinHeight="16">
                                <DockPanel.Children>
                                    <TextBlock Text="{Binding Path=Description}" DockPanel.Dock="Left" VerticalAlignment="Center"/>
                                    <TextBlock Foreground="Aquamarine"
                                                       Visibility="{Binding Path=Frozen, Converter={StaticResource boolToCollapsabilityConverter}}"
                                                       VerticalAlignment="Center"
                                                       Margin="10,0"> (Frozen)</TextBlock>
                                    <Button DockPanel.Dock="Right"
                                                   IsEnabled="{Binding Path=Frozen}"
                                                   Padding="8,0"
                                                   Margin="0,0,0,0"
                                                   Click="InspectButtonBaseOnClick">
                                        <Button.Content>
                                            <DockPanel>
                                                <Image DockPanel.Dock="Left" Source="/icons/Search.png" Margin="0,2,3,2" Height="16"/>
                                                <TextBlock Text="Inspect"/>
                                            </DockPanel>
                                        </Button.Content>
                                    </Button>
                                    <Button DockPanel.Dock="Right" Click="FreezeUnfreezeHeapObjectButtonClicked" Padding="8,0" Margin="0,0,4,0" MinWidth="85">
                                        <Button.Content>
                                            <Grid>
                                                <DockPanel>
                                                    <Image DockPanel.Dock="Left" Source="{Binding Path=Frozen, Converter={StaticResource boolToFreezeIcon}}" Margin="0,2,3,2" Height="16"/>

                                                    <TextBlock Text="Interact in rnet-explore"/>

                                                    <TextBlock Text="{Binding Path=Frozen, Converter={StaticResource boolToFreezeButtonText}}"/>
                                                </DockPanel>
                                                <Image RenderTransformOrigin="0.5, 0.5" Source="icons/Loading.png" Visibility="Collapsed" Height="16">
                                                    <!--<Image.RenderTransform>
                                                        giving the transform a name tells the framework not to freeze it
                                                        <RotateTransform x:Name="noFreeze" />
                                                    </Image.RenderTransform>-->
                                                    <Image.Triggers>
                                                        <EventTrigger RoutedEvent="Loaded">
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetProperty="(Rectangle.RenderTransform).(RotateTransform.Angle)" To="-360" Duration="0:0:1" RepeatBehavior="Forever" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </EventTrigger>
                                                    </Image.Triggers>
                                                </Image>
                                            </Grid>
                                        </Button.Content>
                                    </Button>
                                </DockPanel.Children>
                            </DockPanel>
                        </Grid>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>
        </DockPanel>
        <DockPanel Background="#424242" Grid.Row="3" Grid.Column="0"/>
    </Grid>
</Window>
